from Module import *
def Test():
    Vec=Vector().BuildFromNative(3,[i for i in range(3)])
    F=FNNRelu([3,3,3,3,3])
    Result=Sum(F(Vec))
    Forward()
    print(len(GOperator.Operators))
    print(len(GDataNode.Consts))
    print(len(GDataNode.Grads))
    ToDot("dot/FNN1.gv")
    Backward()

    Result=Sum(F(Vec))
    Forward()
    print(len(GOperator.Operators))
    print(len(GDataNode.Consts))
    print(len(GDataNode.Grads))
    ToDot("dot/FNN2.gv")
    Backward()
def TestMaxPool():
    M=MatrixInput(4,4,[i for i in range(4*4)])
    R=Sum(MaxPool([2,2])(M))
    Forward()
    Backward(Clear=False)
    ToDot("dot/MaxPool.gv")
def TestDropTest():
    M=MatrixInput(4,4,[i for i in range(4*4)])
    R=Sum(DropOut(0.9)(M))
    Forward()
    Backward(Clear=False)
    ToDot("dot/DropOut.gv")
def TestCNN():
    M=MatrixInput(5,5,[i for i in range(5*5)])
    CNN=Simple2DCNNRelu([2,2])
    DO=DropOut(0.1)
    MP=MaxPool([2,2])
    GTRAIN.SetTrain()
    Result=Sum(MP(DO(CNN(M))))
    Forward()
    Backward(Clear=False)
    print(len(GDataNode.Grads))
    print(len(GDataNode.Consts))
    print(len(GOperator.Operators))
    print(Result.Data[0][0].Data)
    ToDot("dot/CNN.gv")
def TestCNNEval():
    M=MatrixInput(5,5,[i for i in range(5*5)])
    CNN=Simple2DCNNRelu([2,2])
    DO=DropOut(0.5)
    MP=MaxPool([2,2])
    GTRAIN.SetEval()
    #pass1
    Result=Sum(MP(DO(CNN(M))))
    Forward()
    print(len(GDataNode.Grads))
    print(len(GDataNode.Consts))
    print(len(GOperator.Operators))
    print(Result.Data[0][0].Data)
    GDataNode.ClearConsts()
    GOperator.Clear()
    #pass2
    Result=Sum(MP(DO(CNN(M))))
    Forward()
    print(len(GDataNode.Grads))
    print(len(GDataNode.Consts))
    print(len(GOperator.Operators))
    print(Result.Data[0][0].Data)
    GDataNode.ClearConsts()
    GOperator.Clear()
#Test()
#TestMaxPool()
#TestDropTest()
#TestCNN()
TestCNNEval()